<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="12" time="1.120" timestamp="2025-09-25T22:35:09.561794+07:00" hostname="white"><testcase classname="tests.contract.test_healthz_contract" name="test_openapi_contains_healthz" time="0.009" /><testcase classname="tests.contract.test_healthz_contract" name="test_healthz_endpoint_responds" time="0.115" /><testcase classname="tests.contract.test_webhook_contract" name="test_openapi_contains_required_paths" time="0.014" /><testcase classname="tests.contract.test_webhook_contract" name="test_service_entrypoint_exists_and_creates_app" time="0.001" /><testcase classname="tests.contract.test_webhook_post_contract" name="test_openapi_contains_webhook_post" time="0.018" /><testcase classname="tests.integration.test_destination_timeout" name="test_destination_timeout_marks_failed" time="0.008" /><testcase classname="tests.integration.test_end_to_end_basic" name="test_end_to_end_basic" time="0.012"><failure message="assert 200 == 201&#10; +  where 200 = &lt;Response [200 OK]&gt;.status_code">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7cc41e614b00&gt;
tmp_path = PosixPath('/tmp/pytest-of-floodboy/pytest-0/test_end_to_end_basic0')

    def test_end_to_end_basic(monkeypatch, tmp_path):
        # Monkeypatch PB client and delivery service
        from src import app as app_module
        from src.services import pb_client as pb
        from src.services import delivery as dlv
    
        stored = {}
    
        def fake_store_event(source: str, payload: dict, extracted: dict, size: int) -&gt; str:
            stored["saved"] = {
                "source": source,
                "payload": payload,
                "extracted": extracted,
                "size": size,
            }
            return "01HXXXXXFAKEEVENTID"
    
        def fake_log_delivery(event_id: str, dest_id: str, success: bool, error: str | None = None) -&gt; None:
            stored.setdefault("logs", []).append({
                "event_id": event_id,
                "dest_id": dest_id,
                "success": success,
                "error": error,
            })
    
        def fake_deliver(dest: dict, message: str) -&gt; bool:
            stored["delivered"] = {"dest": dest["id"], "message": message}
            return True
    
        monkeypatch.setattr(pb, "store_event", fake_store_event)
        monkeypatch.setattr(pb, "log_delivery", fake_log_delivery)
        monkeypatch.setattr(dlv, "deliver", fake_deliver)
    
        # Use default config path; ensure template present
        from src.app import create_app
    
        app = create_app()
        client = TestClient(app)
    
        payload = {"alert": {"title": "Disk space low", "severity": "high"}}
        r = client.post("/webhook/alerts", json=payload)
&gt;       assert r.status_code == 201
E       assert 200 == 201
E        +  where 200 = &lt;Response [200 OK]&gt;.status_code

tests/integration/test_end_to_end_basic.py:46: AssertionError</failure></testcase><testcase classname="tests.integration.test_missing_fields" name="test_missing_mapped_fields_are_empty" time="0.106" /><testcase classname="tests.integration.test_payload_limit" name="test_payload_over_1_mib_returns_413" time="0.007" /><testcase classname="tests.unit.test_config_loader" name="test_config_loader_reads_yaml" time="0.002" /><testcase classname="tests.unit.test_mapping" name="test_extract_fields_returns_empty_for_missing" time="0.000" /><testcase classname="tests.unit.test_metrics" name="test_metrics_counters_increment" time="0.000" /></testsuite></testsuites>